import React, { useState, useMemo, useCallback } from 'react';
import type { Vulnerability } from '../types/vulnerability';
import {
  Paper,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  TableSortLabel,
  TextField,
  Chip,
  Box,
  Button,
  Switch,
  FormControlLabel,
} from '@mui/material';

export interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const columns = [
  { key: 'cveId', label: 'CVE', sortable: true },
  { key: 'severity', label: 'Severity', sortable: true },
  { key: 'package', label: 'Package', sortable: true },
  { key: 'version', label: 'Version', sortable: true },
  { key: 'exploited', label: 'Exploited', sortable: true },
  { key: 'actions', label: 'Actions', sortable: false },
];

const severityColors: Record<string, string> = {
  critical: 'error',
  high: 'warning',
  medium: 'info',
  low: 'success',
  unknown: 'default',
};

// Pre-compute severity order map for O(1) lookup
const severityOrderMap = new Map([
  ['unknown', 4],
  ['low', 3],
  ['medium', 2],
  ['high', 1],
  ['critical', 0],
]);

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  const [sortKey, setSortKey] = useState<string>('severity');
  const [sortAsc, setSortAsc] = useState<boolean>(true);
  const [filter, setFilter] = useState<string>('');
  const [inputValue, setInputValue] = useState<string>('');
  const [dismissed, setDismissed] = useState<Set<string>>(new Set());
  const [showDismissed, setShowDismissed] = useState<boolean>(false);

  // Memoize the filter string to avoid unnecessary re-computations
  const filterLower = useMemo(() => filter.toLowerCase(), [filter]);

  const handleSort = useCallback((key: string) => {
    if (sortKey === key) {
      setSortAsc(!sortAsc);
    } else {
      setSortKey(key);
      setSortAsc(true);
    }
  }, [sortKey, sortAsc]);

  const handleDismiss = useCallback((vuln: Vulnerability) => {
    setDismissed(prev => new Set(prev).add(`${vuln.cveId}-${vuln.package}`));
  }, []);

  const handleUndismiss = useCallback((vuln: Vulnerability) => {
    setDismissed(prev => {
      const newSet = new Set(prev);
      newSet.delete(`${vuln.cveId}-${vuln.package}`);
      return newSet;
    });
  }, []);

  // Memoize filtered results to avoid re-computation on every render
  const filtered = useMemo(() => {
    return vulnerabilities.filter(vuln => {
      // Check dismissal status first (cheaper operation)
      const isDismissed = dismissed.has(`${vuln.cveId}-${vuln.package}`);
      
      // If showDismissed is true, only show dismissed items
      // If showDismissed is false, only show non-dismissed items
      if (showDismissed && !isDismissed) {
        return false;
      }
      if (!showDismissed && isDismissed) {
        return false;
      }

      // Only perform string operations if there's a filter
      if (filterLower) {
        return (
          vuln.cveId.toLowerCase().includes(filterLower) ||
          vuln.package.toLowerCase().includes(filterLower) ||
          vuln.severity.toLowerCase().includes(filterLower)
        );
      }

      return true;
    });
  }, [vulnerabilities, filterLower, dismissed, showDismissed]);

  // Memoize sorted results
  const sorted = useMemo(() => {
    if (filtered.length === 0) return [];

    // Create a stable sort key for better performance
    const getSortValue = (vuln: Vulnerability) => {
      const val = (vuln as any)[sortKey];
      
      if (sortKey === 'severity') {
        return severityOrderMap.get(String(val).toLowerCase()) ?? 999;
      }
      
      if (sortKey === 'exploited') {
        return val ? 1 : 0;
      }
      
      return String(val).toLowerCase();
    };

    // Use a more efficient sorting approach
    const sortedArray = [...filtered];
    sortedArray.sort((a, b) => {
      const aVal = getSortValue(a);
      const bVal = getSortValue(b);
      
      if (aVal < bVal) return sortAsc ? -1 : 1;
      if (aVal > bVal) return sortAsc ? 1 : -1;
      return 0;
    });

    return sortedArray;
  }, [filtered, sortKey, sortAsc]);

  if (!vulnerabilities.length) {
    return <Box sx={{ p: 3, textAlign: 'center' }}>No vulnerabilities found.</Box>;
  }

  return (
    <Paper elevation={3} sx={{ width: '100%', overflowX: 'auto', p: 2, borderRadius: 3 }}>
      <Box sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
        <TextField
          label="Filter by CVE, package, or severity"
          variant="outlined"
          value={inputValue}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}
          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {
            if (e.key === 'Enter') {
              setFilter(inputValue);
            }
          }}
          size="small"
          sx={{ width: 320 }}
        />
        <FormControlLabel
          control={
            <Switch
              checked={showDismissed}
              onChange={(_, checked) => setShowDismissed(checked)}
              color="primary"
            />
          }
          label="Show Dismissed Vulnerabilities"
        />
      </Box>
      <Table sx={{ minWidth: 900 }}>
        <TableHead>
          <TableRow>
            {columns.map(col => (
              <TableCell
                key={col.key}
                sortDirection={sortKey === col.key ? (sortAsc ? 'asc' : 'desc') : false}
                sx={{ fontWeight: 600, background: '#f7f7fa', borderBottom: '2px solid #e0e0e0' }}
              >
                {col.sortable ? (
                  <TableSortLabel
                    active={sortKey === col.key}
                    direction={sortKey === col.key && !sortAsc ? 'desc' : 'asc'}
                    onClick={() => handleSort(col.key)}
                  >
                    {col.label}
                  </TableSortLabel>
                ) : (
                  col.label
                )}
              </TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {sorted.map((vuln, idx) => {
            const isDismissed = dismissed.has(`${vuln.cveId}-${vuln.package}`);
            return (
              <TableRow
                key={`${vuln.cveId}-${vuln.package}-${idx}`}
                hover
                sx={{
                  '&:hover': {
                    backgroundColor: isDismissed ? '#ffeaea' : '#f0f4ff',
                  },
                  backgroundColor: isDismissed ? '#fff0f0' : undefined,
                  opacity: isDismissed ? 0.5 : 1,
                  transition: 'background 0.2s',
                }}
              >
                <TableCell>{vuln.cveId}</TableCell>
                <TableCell>
                  <Chip
                    label={vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                    color={(
                      severityColors[vuln.severity.toLowerCase()] as
                        | 'error'
                        | 'warning'
                        | 'info'
                        | 'success'
                        | 'default'
                        | 'primary'
                        | 'secondary'
                    ) || 'default'}
                    size="small"
                    sx={{ fontWeight: 500 }}
                  />
                </TableCell>
                <TableCell>{vuln.package}</TableCell>
                <TableCell>{vuln.version}</TableCell>
                <TableCell>
                  {vuln.exploited ? (
                    <Chip label="True" color="error" size="small" />
                  ) : (
                    <Chip label="False" color="default" size="small" />
                  )}
                </TableCell>
                <TableCell>
                  {isDismissed ? (
                    <Button
                      variant="outlined"
                      color="secondary"
                      size="small"
                      onClick={() => handleUndismiss(vuln)}
                    >
                      Undo Dismiss
                    </Button>
                  ) : (
                    <Button
                      variant="outlined"
                      color="error"
                      size="small"
                      onClick={() => handleDismiss(vuln)}
                    >
                      Dismiss
                    </Button>
                  )}
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
    </Paper>
  );
};

export default VulnerabilityTable; 