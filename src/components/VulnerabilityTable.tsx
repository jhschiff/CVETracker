import React, { useState } from 'react';
import type { Vulnerability } from '../types/vulnerability';
import {
  Paper,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  TableSortLabel,
  TextField,
  Chip,
  Box,
  Button,
  Switch,
  FormControlLabel,
} from '@mui/material';

export interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const columns = [
  { key: 'cveId', label: 'CVE', sortable: true },
  { key: 'severity', label: 'Severity', sortable: true },
  { key: 'package', label: 'Package', sortable: true },
  { key: 'version', label: 'Version', sortable: true },
  { key: 'exploited', label: 'Exploited', sortable: true },
  { key: 'actions', label: 'Actions', sortable: false },
];

const severityColors: Record<string, string> = {
  critical: 'error',
  high: 'warning',
  medium: 'info',
  low: 'success',
  unknown: 'default',
};

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  const [sortKey, setSortKey] = useState<string>('severity');
  const [sortAsc, setSortAsc] = useState<boolean>(true);
  const [filter, setFilter] = useState<string>('');
  const [inputValue, setInputValue] = useState<string>('');
  const [dismissed, setDismissed] = useState<Set<string>>(new Set());
  const [showDismissed, setShowDismissed] = useState<boolean>(false);

  const handleSort = (key: string) => {
    if (sortKey === key) {
      setSortAsc(!sortAsc);
    } else {
      setSortKey(key);
      setSortAsc(true);
    }
  };

  const handleDismiss = (vuln: Vulnerability) => {
    setDismissed(prev => new Set(prev).add(`${vuln.cveId}-${vuln.package}`));
  };

  const handleUndismiss = (vuln: Vulnerability) => {
    setDismissed(prev => {
      const newSet = new Set(prev);
      newSet.delete(`${vuln.cveId}-${vuln.package}`);
      return newSet;
    });
  };

  const filtered = vulnerabilities.filter(vuln =>
    (vuln.cveId.toLowerCase().includes(filter.toLowerCase()) ||
      vuln.package.toLowerCase().includes(filter.toLowerCase()) ||
      vuln.severity.toLowerCase().includes(filter.toLowerCase())) &&
    (showDismissed ? dismissed.has(`${vuln.cveId}-${vuln.package}`) : !dismissed.has(`${vuln.cveId}-${vuln.package}`))
  );

  const severityOrder = ['unknown', 'low', 'medium', 'high', 'critical'];

  const sorted = [...filtered].sort((a, b) => {
    const aVal = (a as any)[sortKey];
    const bVal = (b as any)[sortKey];

    if (sortKey === 'severity') {
      const aIdx = severityOrder.indexOf(String(aVal).toLowerCase());
      const bIdx = severityOrder.indexOf(String(bVal).toLowerCase());
      const aOrder = aIdx === -1 ? severityOrder.length : aIdx;
      const bOrder = bIdx === -1 ? severityOrder.length : bIdx;
      if (aOrder < bOrder) return sortAsc ? -1 : 1;
      if (aOrder > bOrder) return sortAsc ? 1 : -1;
      return 0;
    }
    if (sortKey === 'exploited') {
      return sortAsc ? (aVal === bVal ? 0 : aVal ? -1 : 1) : (aVal === bVal ? 0 : aVal ? 1 : -1);
    }
    const aStr = String(aVal).toLowerCase();
    const bStr = String(bVal).toLowerCase();
    if (aStr < bStr) return sortAsc ? -1 : 1;
    if (aStr > bStr) return sortAsc ? 1 : -1;
    return 0;
  });

  if (!vulnerabilities.length) {
    return <Box sx={{ p: 3, textAlign: 'center' }}>No vulnerabilities found.</Box>;
  }

  return (
    <Paper elevation={3} sx={{ width: '100%', overflowX: 'auto', p: 2, borderRadius: 3 }}>
      <Box sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
        <TextField
          label="Filter by CVE, package, or severity"
          variant="outlined"
          value={inputValue}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}
          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {
            if (e.key === 'Enter') {
              setFilter(inputValue);
            }
          }}
          size="small"
          sx={{ width: 320 }}
        />
        <FormControlLabel
          control={
            <Switch
              checked={showDismissed}
              onChange={(_, checked) => setShowDismissed(checked)}
              color="primary"
            />
          }
          label={showDismissed ? 'Show Dismissed' : 'Hide Dismissed'}
        />
      </Box>
      <Table sx={{ minWidth: 900 }}>
        <TableHead>
          <TableRow>
            {columns.map(col => (
              <TableCell
                key={col.key}
                sortDirection={sortKey === col.key ? (sortAsc ? 'asc' : 'desc') : false}
                sx={{ fontWeight: 600, background: '#f7f7fa', borderBottom: '2px solid #e0e0e0' }}
              >
                {col.sortable ? (
                  <TableSortLabel
                    active={sortKey === col.key}
                    direction={sortKey === col.key && !sortAsc ? 'desc' : 'asc'}
                    onClick={() => handleSort(col.key)}
                  >
                    {col.label}
                  </TableSortLabel>
                ) : (
                  col.label
                )}
              </TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {sorted.map((vuln, idx) => {
            const isDismissed = dismissed.has(`${vuln.cveId}-${vuln.package}`);
            return (
              <TableRow
                key={`${vuln.cveId}-${vuln.package}-${idx}`}
                hover
                sx={{
                  '&:hover': {
                    backgroundColor: isDismissed ? '#ffeaea' : '#f0f4ff',
                  },
                  backgroundColor: isDismissed ? '#fff0f0' : undefined,
                  opacity: isDismissed ? 0.5 : 1,
                  transition: 'background 0.2s',
                }}
              >
                <TableCell>{vuln.cveId}</TableCell>
                <TableCell>
                  <Chip
                    label={vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                    color={(
                      severityColors[vuln.severity.toLowerCase()] as
                        | 'error'
                        | 'warning'
                        | 'info'
                        | 'success'
                        | 'default'
                        | 'primary'
                        | 'secondary'
                    ) || 'default'}
                    size="small"
                    sx={{ fontWeight: 500 }}
                  />
                </TableCell>
                <TableCell>{vuln.package}</TableCell>
                <TableCell>{vuln.version}</TableCell>
                <TableCell>
                  {vuln.exploited ? (
                    <Chip label="True" color="error" size="small" />
                  ) : (
                    <Chip label="False" color="default" size="small" />
                  )}
                </TableCell>
                <TableCell>
                  {isDismissed ? (
                    <Button
                      variant="outlined"
                      color="secondary"
                      size="small"
                      onClick={() => handleUndismiss(vuln)}
                    >
                      Undo Dismiss
                    </Button>
                  ) : (
                    <Button
                      variant="outlined"
                      color="error"
                      size="small"
                      onClick={() => handleDismiss(vuln)}
                    >
                      Dismiss
                    </Button>
                  )}
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
    </Paper>
  );
};

export default VulnerabilityTable; 