import React, { useMemo, useRef, useState, useEffect, useCallback } from 'react';
import {
  MaterialReactTable,
  useMaterialReactTable,
  type MRT_ColumnDef,
  type MRT_SortingState,
  type MRT_RowVirtualizer,
} from 'material-react-table';
import type { Vulnerability } from '../types/vulnerability';
import { Severity } from '../types/severity';
import { Button, Chip, TextField, Box, Switch, FormControlLabel, Typography } from '@mui/material';
import { mkConfig, generateCsv, download } from 'export-to-csv';

// --- Constants and Helpers ---
const csvConfig = mkConfig({
  fieldSeparator: ',',
  decimalSeparator: '.',
  useKeysAsHeaders: true,
});

const severityOrder: Record<Severity, number> = {
  [Severity.CRITICAL]: 0,
  [Severity.HIGH]: 1,
  [Severity.MEDIUM]: 2,
  [Severity.LOW]: 3,
  [Severity.UNKNOWN]: 4,
};

const severityColor: Record<Severity, 'error' | 'warning' | 'info' | 'success' | 'default'> = {
  [Severity.CRITICAL]: 'error',
  [Severity.HIGH]: 'warning',
  [Severity.MEDIUM]: 'info',
  [Severity.LOW]: 'success',
  [Severity.UNKNOWN]: 'default',
};

function handleExportCSV(table: any) {
  const csv = generateCsv(csvConfig)(table.getRowModel().rows.map((row: any) => row.original));
  download(csvConfig)(csv);
}

function getColumns(handleDismiss: (v: Vulnerability) => void, handleUndismiss: (v: Vulnerability) => void): MRT_ColumnDef<Vulnerability & { isDismissed: boolean }>[] {
  return [
    {
      accessorKey: 'cveId',
      header: 'CVE',
      size: 120,
    },
    {
      accessorKey: 'severity',
      header: 'Severity',
      size: 100,
      Cell: ({ cell }) => (
        <Chip
          label={cell.getValue<Severity>().charAt(0).toUpperCase() + cell.getValue<Severity>().slice(1)}
          color={severityColor[cell.getValue<Severity>()]}
          size="small"
          sx={{ fontWeight: 500 }}
        />
      ),
      sortingFn: (rowA, rowB, columnId) => {
        const a = rowA.getValue<Severity>(columnId);
        const b = rowB.getValue<Severity>(columnId);
        return (severityOrder[a] ?? 99) - (severityOrder[b] ?? 99);
      },
    },
    {
      accessorKey: 'package',
      header: 'Package',
      size: 140,
    },
    {
      accessorKey: 'installed',
      header: 'Installed',
      size: 100,
    },
    {
      accessorKey: 'fixed',
      header: 'Fixed Version',
      size: 100,
    },
    {
      accessorKey: 'exploited',
      header: 'Exploited',
      size: 100,
      Cell: ({ cell }) => (
        cell.getValue<boolean>() ? (
          <Chip label="True" color="error" size="small" />
        ) : (
          <Chip label="False" color="default" size="small" />
        )
      ),
    },
    {
      accessorKey: 'actions',
      header: 'Actions',
      size: 120,
      Cell: ({ row }) => {
        const vuln = row.original;
        return vuln.isDismissed ? (
          <Button
            variant="outlined"
            color="secondary"
            size="small"
            onClick={() => handleUndismiss(vuln)}
          >
            Undo Dismiss
          </Button>
        ) : (
          <Button
            variant="contained"
            size="small"
            onClick={() => handleDismiss(vuln)}
            sx={{ backgroundColor: 'black', color: 'white', '&:hover': { backgroundColor: '#222' } }}
          >
            Dismiss
          </Button>
        );
      },
      enableSorting: false,
    },
  ];
}

export interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  // --- State ---
  const [sorting, setSorting] = useState<MRT_SortingState>([]);
  const [dismissed, setDismissed] = useState<Set<string>>(new Set());
  const [globalFilter, setGlobalFilter] = useState('');
  const [showDismissed, setShowDismissed] = useState(false);
  const rowVirtualizerInstanceRef = useRef<MRT_RowVirtualizer>(null);

  // --- Effects ---
  useEffect(() => {
    // Scroll to the top of the table when the sorting changes
    try {
      rowVirtualizerInstanceRef.current?.scrollToIndex?.(0);
    } catch (error) {
      // ignore
    }
  }, [sorting]);

  // --- Handlers ---
  const handleDismiss = useCallback((vuln: Vulnerability) => {
    setDismissed(prev => new Set(prev).add(`${vuln.cveId}-${vuln.package}`));
  }, []);

  const handleUndismiss = useCallback((vuln: Vulnerability) => {
    setDismissed(prev => {
      const newSet = new Set(prev);
      newSet.delete(`${vuln.cveId}-${vuln.package}`);
      return newSet;
    });
  }, []);

  // --- Data Preparation ---
  const dataWithDismissed = useMemo(() =>
    vulnerabilities.map(vuln => ({ ...vuln, isDismissed: dismissed.has(`${vuln.cveId}-${vuln.package}`) })),
    [vulnerabilities, dismissed]
  );

  const filteredData = useMemo(() =>
    showDismissed
      ? dataWithDismissed.filter(vuln => vuln.isDismissed)
      : dataWithDismissed.filter(vuln => !vuln.isDismissed),
    [dataWithDismissed, showDismissed]
  );

  // --- Columns ---
  const columns = useMemo(() => getColumns(handleDismiss, handleUndismiss), [handleDismiss, handleUndismiss]);

  // --- Table Instance ---
  const table = useMaterialReactTable({
    columns,
    data: filteredData,
    enableBottomToolbar: false,
    enableGlobalFilterModes: true,
    enablePagination: false,
    enableRowNumbers: true,
    enableRowVirtualization: true,
    muiTableContainerProps: { sx: { maxHeight: '600px' } },
    onSortingChange: setSorting,
    state: { isLoading: false, sorting, globalFilter },
    onGlobalFilterChange: setGlobalFilter,
    rowVirtualizerInstanceRef,
    rowVirtualizerOptions: { overscan: 5 },
    muiTableBodyRowProps: ({ row }) => {
      const isDismissed = row.original.isDismissed;
      return isDismissed
        ? {
            sx: {
              backgroundColor: '#fff0f0',
              opacity: 0.5,
              transition: 'background 0.2s',
            },
          }
        : {};
    },
    renderTopToolbarCustomActions: ({ table }) => (
      <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
        <Button onClick={() => handleExportCSV(table)}>Export CSV</Button>
      </Box>
    ),
  });

  // --- Render ---
  return (
    <Box>
      <Typography variant="h5" fontWeight={700} sx={{ mb: 2 }}>
        CVE Tracker
      </Typography>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
        <TextField
          label="Search vulnerabilities"
          variant="outlined"
          value={globalFilter}
          onChange={e => setGlobalFilter(e.target.value)}
          size="small"
          sx={{ width: 320 }}
        />
        <FormControlLabel
          control={
            <Switch
              checked={showDismissed}
              onChange={(_, checked) => setShowDismissed(checked)}
              color="primary"
            />
          }
          label="Show Only Dismissed"
        />
      </Box>
      <MaterialReactTable table={table} />
    </Box>
  );
};

export default VulnerabilityTable; 