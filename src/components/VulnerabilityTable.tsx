import React, { useMemo, useRef, useState, useEffect, useCallback } from 'react';
import {
  MaterialReactTable,
  useMaterialReactTable,
  type MRT_ColumnDef,
  type MRT_SortingState,
  type MRT_RowVirtualizer,
} from 'material-react-table';
import type { Vulnerability } from '../types/vulnerability';
import { Button, Chip, TextField, Box } from '@mui/material';

export interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  const [sorting, setSorting] = useState<MRT_SortingState>([]);
  const [dismissed, setDismissed] = useState<Set<string>>(new Set());
  const [globalFilter, setGlobalFilter] = useState('');
  const rowVirtualizerInstanceRef = useRef<MRT_RowVirtualizer>(null);

  useEffect(() => {
    // Scroll to the top of the table when the sorting changes
    try {
      rowVirtualizerInstanceRef.current?.scrollToIndex?.(0);
    } catch (error) {
      // ignore
    }
  }, [sorting]);

  const handleDismiss = useCallback((vuln: Vulnerability) => {
    setDismissed(prev => new Set(prev).add(`${vuln.cveId}-${vuln.package}`));
  }, []);

  const handleUndismiss = useCallback((vuln: Vulnerability) => {
    setDismissed(prev => {
      const newSet = new Set(prev);
      newSet.delete(`${vuln.cveId}-${vuln.package}`);
      return newSet;
    });
  }, []);

  // Add isDismissed property for each vulnerability
  const dataWithDismissed = useMemo(() => {
    return vulnerabilities.map(vuln => ({ ...vuln, isDismissed: dismissed.has(`${vuln.cveId}-${vuln.package}`) }));
  }, [vulnerabilities, dismissed]);

  const columns = useMemo<MRT_ColumnDef<Vulnerability & { isDismissed: boolean }>[]>(
    () => [
      {
        accessorKey: 'cveId',
        header: 'CVE',
        size: 120,
      },
      {
        accessorKey: 'severity',
        header: 'Severity',
        size: 100,
        Cell: ({ cell }) => (
          <Chip
            label={cell.getValue<string>().charAt(0).toUpperCase() + cell.getValue<string>().slice(1)}
            color={
              cell.getValue<string>().toLowerCase() === 'critical' ? 'error' :
              cell.getValue<string>().toLowerCase() === 'high' ? 'warning' :
              cell.getValue<string>().toLowerCase() === 'medium' ? 'info' :
              cell.getValue<string>().toLowerCase() === 'low' ? 'success' :
              'default'
            }
            size="small"
            sx={{ fontWeight: 500 }}
          />
        ),
      },
      {
        accessorKey: 'package',
        header: 'Package',
        size: 140,
      },
      {
        accessorKey: 'version',
        header: 'Version',
        size: 100,
      },
      {
        accessorKey: 'exploited',
        header: 'Exploited',
        size: 100,
        Cell: ({ cell }) => (
          cell.getValue<boolean>() ? (
            <Chip label="True" color="error" size="small" />
          ) : (
            <Chip label="False" color="default" size="small" />
          )
        ),
      },
      {
        accessorKey: 'actions',
        header: 'Actions',
        size: 120,
        Cell: ({ row }) => {
          const vuln = row.original;
          return vuln.isDismissed ? (
            <Button
              variant="outlined"
              color="secondary"
              size="small"
              onClick={() => handleUndismiss(vuln)}
            >
              Undo Dismiss
            </Button>
          ) : (
            <Button
              variant="outlined"
              color="error"
              size="small"
              onClick={() => handleDismiss(vuln)}
            >
              Dismiss
            </Button>
          );
        },
        enableSorting: false,
      },
    ],
    [handleDismiss, handleUndismiss],
  );

  const table = useMaterialReactTable({
    columns,
    data: dataWithDismissed,
    enableBottomToolbar: false,
    enableGlobalFilterModes: true,
    enablePagination: false,
    enableRowNumbers: true,
    enableRowVirtualization: true,
    muiTableContainerProps: { sx: { maxHeight: '600px' } },
    onSortingChange: setSorting,
    state: { isLoading: false, sorting, globalFilter },
    onGlobalFilterChange: setGlobalFilter,
    rowVirtualizerInstanceRef,
    rowVirtualizerOptions: { overscan: 5 },
  });

  return (
    <Box>
      <TextField
        label="Search vulnerabilities"
        variant="outlined"
        value={globalFilter}
        onChange={e => setGlobalFilter(e.target.value)}
        size="small"
        sx={{ mb: 2, width: 320 }}
      />
      <MaterialReactTable table={table} />
    </Box>
  );
};

export default VulnerabilityTable; 